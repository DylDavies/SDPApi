name: Deploy Express API to DigitalOcean

# This workflow triggers when a new release is published
# on:
#   release:
#     types: [published]
on:
    push

jobs:
  deploy:
    runs-on: ubuntu-latest # The type of machine to run the job on

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.18.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Step to create the .env file from GitHub Secrets
      - name: Create .env file
        run: |
          echo "DB_CONN_STRING=${{ secrets.DB_CONN_STRING }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "REDIRECT_URI=${{ secrets.REDIRECT_URI }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Deploy application files via rsync
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            # Create the directory if it doesn't exist
            mkdir -p /var/www/api
          
      - name: Sync files to server
        run: |
          rsync -avzr --delete \
            -e "ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY_FILE" \
            . ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/api/
        env:
          SSH_PRIVATE_KEY_FILE: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Restart application on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # FIX for "command not found": Source nvm script to load node, npm, pm2
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # Navigate to the app directory
            cd /var/www/api
            
            # Start or restart the application with PM2
            pm2 startOrRestart ecosystem.config.js --env production